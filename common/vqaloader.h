// TiberianDawn.DLL and RedAlert.dll and corresponding source code is free
// software: you can redistribute it and/or modify it under the terms of
// the GNU General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.

// TiberianDawn.DLL and RedAlert.dll and corresponding source code is distributed
// in the hope that it will be useful, but with permitted additional restrictions
// under Section 7 of the GPL. See the GNU General Public License in LICENSE.TXT
// distributed with this program. You should have received a copy of the
// GNU General Public License along with permitted additional restrictions
// with this program. If not, see https://github.com/electronicarts/CnC_Remastered_Collection
#ifndef VQALOADER_H
#define VQALOADER_H

#include "endianness.h"
#include "vqaaudio.h"
#include "vqadrawer.h"
#include "vqafile.h"

typedef struct _VQAHeader
    VQAHeader; // This forward declares the header struct so you can have types that have pointers to
               // it.
typedef struct _VQAHandle VQAHandle;
typedef struct _VQAConfig VQAConfig;
typedef struct _VQACBNode VQACBNode;
typedef struct _VQAFrameNode VQAFrameNode;

typedef int (*DrawFrameFuncPtr)(VQAHandle*);
typedef int (*PageFlipFuncPtr)(VQAHandle*);
typedef void (*UnVQFuncPtr)(uint8_t*, uint8_t*, uint8_t*, unsigned, unsigned, unsigned);

// macro to make iff chunk names depending on system endianness.
#ifdef __LITTLE_ENDIAN__
#define MAKE_CHUNK(a, b, c, d) ((uint32_t)(((d) << 24)) | ((c) << 16) | ((b) << 8) | (a))
#else // __BIG_ENDIAN__
#define MAKE_CHUNK(a, b, c, d) ((uint32_t)(((a) << 24)) | ((b) << 16) | ((c) << 8) | (d))
#endif

// main iff chunk, this contains the vqa format nested chunks.
#define CHUNK_FORM MAKE_CHUNK('F', 'O', 'R', 'M')

// header chunk.
#define CHUNK_VQHD MAKE_CHUNK('V', 'Q', 'H', 'D')

#define CHUNK_WVQA MAKE_CHUNK('W', 'V', 'Q', 'A')

// name (vqa encoder name and date string) chunk.
#define CHUNK_NAME                                                                                                     \
    MAKE_CHUNK('N',                                                                                                    \
               'A',                                                                                                    \
               'M',                                                                                                    \
               'E') // Standard IFF Name chunk used in Poly,BR and LOL game VQA's, poly contains the string    \
                            // "Generated by BuildVQA 3.9 (03/03/95)"

// sound chunks.
#define CHUNK_SND0 MAKE_CHUNK('S', 'N', 'D', '0') // PCM Audio
#define CHUNK_SND1 MAKE_CHUNK('S', 'N', 'D', '1') // WS ADPCM
#define CHUNK_SND2 MAKE_CHUNK('S', 'N', 'D', '2') // SOSCodec (IMA ADPCM) Audio
#define CHUNK_SN2J MAKE_CHUNK('S', 'N', '2', 'J') // SN2J is jump-information for SND2-decoding

// These are alternative audio streams, though how they work is currently unknown and RA does not support them.
#define CHUNK_SNA0 MAKE_CHUNK('S', 'N', 'A', '0') // PCM Audio
#define CHUNK_SNA1 MAKE_CHUNK('S', 'N', 'A', '1') // WS ADPCM
#define CHUNK_SNA2 MAKE_CHUNK('S', 'N', 'A', '2') // SOSCodec (IMA ADPCM) Audio

#define CHUNK_ZBUF MAKE_CHUNK('Z', 'B', 'U', 'F') // ZBUFfer data                   //Used in BR only?
#define CHUNK_VIEW MAKE_CHUNK('V', 'I', 'E', 'W') // VIEWport                       //3x4 Matrix. Used in BR only?
#define CHUNK_AESC MAKE_CHUNK('A', 'E', 'S', 'C') // Something Pal related          //Used in BR only?
#define CHUNK_LITE MAKE_CHUNK('L', 'I', 'T', 'E') // LIghTing Entries?              //Used in BR only?
#define CHUNK_FINF MAKE_CHUNK('F', 'I', 'N', 'F') // Appears to contain offsets to each VQFR chunk (and VQFL?)

#define CHUNK_CLIP MAKE_CHUNK('C', 'L', 'I', 'P') // Used for cropping the VQA to a specific size

#define CHUNK_CMDS MAKE_CHUNK('C', 'M', 'D', 'S') // Only used in Malcolms Revenge?

#define CHUNK_SPAN MAKE_CHUNK('S', 'P', 'A', 'N') // Only appears to be in LOLG/LOL3 Sound effect related

// loop information and sub chunks.
#define CHUNK_LINF MAKE_CHUNK('L', 'I', 'N', 'F')
#define CHUNK_LINH MAKE_CHUNK('L', 'I', 'N', 'H')
#define CHUNK_LIND MAKE_CHUNK('L', 'I', 'N', 'D') // Contains Loop start and End number array as ushort

#define CHUNK_LNIN MAKE_CHUNK('L', 'N', 'I', 'N')
#define CHUNK_LNIH MAKE_CHUNK('L', 'N', 'I', 'H')
#define CHUNK_LNIO MAKE_CHUNK('L', 'N', 'I', 'O')
#define CHUNK_LNID MAKE_CHUNK('L', 'N', 'I', 'D') // Contains Loop names as strings

#define CHUNK_MSCI MAKE_CHUNK('M', 'S', 'C', 'I') // Main? SCene? Information?
#define CHUNK_MSCH MAKE_CHUNK('M', 'S', 'C', 'H') // Main? SCene? Header?
#define CHUNK_MSCT MAKE_CHUNK('M', 'S', 'C', 'T') // Main? SCene? T?

// codebook information and sub chunks.
#define CHUNK_CINF MAKE_CHUNK('C', 'I', 'N', 'F') // Codebook INFormation
#define CHUNK_CINH MAKE_CHUNK('C', 'I', 'N', 'H') // Codebook INformation Header
#define CHUNK_CIND MAKE_CHUNK('C', 'I', 'N', 'D') // Codebook INformation Data

#define CHUNK_VQFR MAKE_CHUNK('V', 'Q', 'F', 'R') // Vector Quantized FRame
#define CHUNK_CBFZ MAKE_CHUNK('C', 'B', 'F', 'Z') // CodeBook Full Compressed
#define CHUNK_VPTR MAKE_CHUNK('V', 'P', 'T', 'R') // Vector PointeR Uncompressed
#define CHUNK_CBF0 MAKE_CHUNK('C', 'B', 'F', '0') // CodeBook Full Uncompressed
#define CHUNK_CBP0 MAKE_CHUNK('C', 'B', 'P', '0') // CodeBook Partial Uncompressed
#define CHUNK_CPL0 MAKE_CHUNK('C', 'P', 'L', '0') // Color PaLette Uncompressed
#define CHUNK_VPTZ MAKE_CHUNK('V', 'P', 'T', 'Z') // Vector Pointer Table Compressed
#define CHUNK_VPRZ MAKE_CHUNK('V', 'P', 'R', 'Z') // Vector PointeR Compressed
#define CHUNK_CBPZ MAKE_CHUNK('C', 'B', 'P', 'Z') // CodeBook Partial Compressed

// palette information and sub chunks.
#define CHUNK_PINF MAKE_CHUNK('P', 'I', 'N', 'F') // Palette INFormation
#define CHUNK_PINH MAKE_CHUNK('P', 'I', 'N', 'H') // Palette INformation Header
#define CHUNK_PIND MAKE_CHUNK('P', 'I', 'N', 'D') // Palette INformation Data

#define CHUNK_MFCI MAKE_CHUNK('M', 'F', 'C', 'I')
#define CHUNK_MFCH MAKE_CHUNK('M', 'F', 'C', 'H')
#define CHUNK_MFCD MAKE_CHUNK('M', 'F', 'C', 'D')
#define CHUNK_MFCT MAKE_CHUNK('M', 'F', 'C', 'T')

#define CHUNK_VQFL MAKE_CHUNK('V', 'Q', 'F', 'L') // Vector Quantized Frame Loop used in LOL3 and BR
#define CHUNK_CBFZ MAKE_CHUNK('C', 'B', 'F', 'Z')

#define CHUNK_CAP0                                                                                                     \
    MAKE_CHUNK(                                                                                                        \
        'C',                                                                                                           \
        'A',                                                                                                           \
        'P',                                                                                                           \
        '0') // Isn't in any VQA's, present in early TD code, captions(subtitles) where in there compressed with LCW
#define CHUNK_EVA0 MAKE_CHUNK('E', 'V', 'A', '0') // Present in early TD code, purpose unknown

// Not found in any VQAs
#define CHUNK_CPLZ MAKE_CHUNK('C', 'P', 'L', 'Z') // Present in RA code and TS code  Color PaLette Compressed
#define CHUNK_VPTD MAKE_CHUNK('V', 'P', 'T', 'D') // Present in RA code and TS code, read with Load_VPTZ
#define CHUNK_VQFK MAKE_CHUNK('V', 'Q', 'F', 'K') // Present in RA code and TS code, read with Load_VQF
#define CHUNK_VPTK MAKE_CHUNK('V', 'P', 'T', 'K') // Present in RA code and TS code
#define CHUNK_VPT0 MAKE_CHUNK('V', 'P', 'T', '0') // Present in RA code and TS code //Vector Pointer Table Uncompressed
#define CHUNK_VPDZ MAKE_CHUNK('V', 'P', 'D', 'Z') // Present in BR code
#define CHUNK_VPKZ MAKE_CHUNK('V', 'P', 'K', 'Z') // Present in BR code

typedef enum
{
    VQA_DATA_FLAG_ZERO = 0x0,
    VQA_DATA_FLAG_REPEAT_SAME_TAG = 0x1,
    VQA_DATA_FLAG_2 = 0x2,
    VQA_DATA_FLAG_4 = 0x4,
    VQA_DATA_FLAG_8 = 0x8,
    VQA_DATA_FLAG_VIDEO_MEMORY_SET = 0x10,
    VQA_DATA_FLAG_32 = 0x20,
    VQA_DATA_FLAG_64 = 0x40,
    VQA_DATA_FLAG_LOOP_STARTED = 0x80,
    VQA_DATA_FLAG_LOOP_SWITCHED = 0x100,
    VQA_DATA_FLAG_512 = 0x200,
    VQA_DATA_FLAG_1024 = 0x400,
    VQA_DATA_FLAG_2048 = 0x800,
} VQADataFlagEnum;

typedef struct _VQALoader
{
    VQACBNode* CurCB;
    VQACBNode* FullCB;
    VQAFrameNode* CurFrame;
    int NumPartialCB;
    int PartialCBSize;
    int CurFrameNum;
    int LastCBFrame;
    int LastFrameNum;
    int WaitsOnDrawer;
    int WaitsOnAudio;
    int FrameSize;
    int MaxFrameSize;
} VQALoader;

typedef struct _VQAData
{
    DrawFrameFuncPtr Draw_Frame;
    PageFlipFuncPtr Page_Flip;
    UnVQFuncPtr UnVQ;
    VQAFrameNode* FrameData;
    VQACBNode* CBData;
    VQAAudio Audio;
    VQALoader Loader;
    VQAChunkHeader Chunk;
    VQADrawer Drawer;
    VQAFlipper Flipper;
    unsigned Flags; // VQADataFlagEnum
    int* Foff;
    int VBIBit;
    int MaxCBSize;
    int MaxPalSize;
    int MaxPtrSize;
    int LoadedFrames;
    int DrawnFrames;
    int StartTime;
    int EndTime;
    int MemUsed;
} VQAData;

#pragma pack(push, 1)
typedef struct _VQASND1Header
{
    int16_t OutSize;
    int16_t Size;
} VQASND1Header;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _VQASN2JHeader
{
    int16_t StepIndex;
    int32_t Predictor;
} VQASN2JHeader;
#pragma pack(pop)

int VQA_Open(VQAHandle* handle, const char* filename, VQAConfig* config);
void VQA_Close(VQAHandle* handle);
int VQA_LoadFrame(VQAHandle* handle);
int VQA_SeekFrame(VQAHandle* handle, int framenum, int fromwhere);
VQAData* VQA_AllocBuffers(VQAHeader* header, VQAConfig* config);
void VQA_FreeBuffers(VQAData* data, VQAConfig* config, VQAHeader* header);
int VQA_PrimeBuffers(VQAHandle* handle);

#endif
